#!/usr/bin/env python

# Generates a graphic from the dataset generated in Redis Instant Recovery (Redis IR).
# The graphic shows  information about the memory usage.
# The graphic is generated by a dataset is a CSV file containing the fields: memory in 
# megabytes, cpu in percentage, and time of the information collection.

# Bellows the CSV lines:
#   Time (in seconds) of the database startup, recovery, and benchmark execution. 
#   When the time is not obtained, the value is setted as -1.
#        Belows the fields used:
#        time                 cpu         memory
#        "Database startup"               <obtained time>    
#        "Recovery"                       <obtained time>     <obtained time>     
#        "Benchmark"                      <obtained time>     <obtained time> 
#        "Shutdown"                       <obtained time> 
#    Checkpoint process information is stored before the commands executed as bellows:
#        time              cpu               memory
#       "Checkpoint"       <idCheckpoint>    <obtained time>     <obtained time>
#       "Checkpoint End"   <idCheckpoint>                        <obtained time>
#    The remaind CSV data lines are really information obtained.
#        time               cpu                memory
#        <obtained time>    <obtained value>   <obtained value>


#path = path to dataset
def processData(path, start_time):
    data = open(path).readlines()

    #Counts the lines of the dataset
    total = len(data)
    
    #Gets the database start up time
    ln = data[1].split(";")
    database_startup_time = int(ln[2]);
    
    
    #Removes header and database Recoverystart up information
    data.pop(0)
    data.pop(0)

    '''
        Creates a list of items from column 'endTime' (in microseconds) of the dataset 
        and converts all items to seconds. Additionally, these items are converted to 
        relative time to the  database start up time, i.e, the  database start up time 
        will be the zero time. 
    '''
    database_startup = 0
    otherElements = []
    x = []
    y = []
    for i in range(len(data)):
        linha = data[i].split(";")
        if linha[0].isnumeric():   
            num =  int((int(linha[0]) - database_startup_time)/1000000)
            x.append(num)
            y.append(float(linha[2].replace(',', '.')))
        else:   
            element = []
            if linha[0] == "Database startup":
                element.append("System restart")
                num = float((int(linha[2]) - database_startup_time)/1000000)
                element.append(num)
                database_startup = num
            else: 
                if linha[0] == "Shutdown":
                        element.append("System failure")
                        num = float((int(linha[2]) - database_startup_time)/1000000)#startTime
                        element.append(num)
                else:
                    if linha[0] == "Recovery":
                        num = float((int(linha[2]) - database_startup_time)/1000000)#startTime
                        if num > 0:
                            element.append("Recovery")
                            element.append(num)
                            num = float((int(linha[3]) - database_startup_time)/1000000)#finishTime
                            element.append(num)
                            database_recovery = num
                    else:
                        if linha[0] == "Benchmark":
                            element.append("Benchmark")
                            num = float((int(linha[2]) - database_startup_time)/1000000)#startTime
                            element.append(num)
                            num = float((int(linha[3]) - database_startup_time)/1000000)#finishTime
                            element.append(num)
                        else:
                            if linha[0] == "Checkpoint":
                                element.append("Checkpoint")  # Checkpoint
                                #element.append(linha[1])  # checkpoint ID
                                element.append((int(linha[2])-database_startup_time)/1000000) #startTime
                                element.append((int(linha[3])-database_startup_time)/1000000) #finishTime
            if element:
                otherElements.append(element)

    print("Total of lines from dataset:", total)
    print("Graphic: X lines = ", len(x), ", Y lines = ", len(y))

    return x, y, otherElements



def printGraphic(x_data, y_data, otherElements, cor, legend):
    import matplotlib.pyplot as plt
    plt.figure(figsize=(16,8))

    #plt.rc('font', size=20) 
    #plt.rc('axes', titlesize=20)     # fontsize of the axes title
    #plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
    #plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
    #plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
    #plt.rc('legend', fontsize=20)    # legend fontsize
    #plt.rc('figure', titlesize=20)  # fontsize of the figure title

    plt.plot(x_data, y_data, color = cor, label = legend)
    plt.grid(True)
    plt.xlabel("Time (seconds)")
    plt.ylabel("Memory usage (%)")
    leg = plt.legend()
    leg.get_frame().set_edgecolor('black')
    
    y_max = max(y_data)

    if otherElements:
        x_scatter1 = []
        y_scatter1 = []
        for i in range(len(otherElements)):
            line = otherElements[i]
            if line[0] == "System restart":
                x_scatter1.append(line[1])
                y_scatter1.append(y_max/10)
                plt.text(line[1], y_max/10, str(round(line[1], 2)) + 's \n(System Restart)', ha='left', va='center')
                print("System restart = " + str(line[1]) + " seconds")
            else:
                if line[0] == "System failure":
                    plt.text(line[1], y_max, 'System failure', ha='center', va='baseline', weight="bold")
                    plt.text(line[1], y_max, str(round(line[1], 2)) + 's', ha='left', va='top')
                    plt.axvline(x=line[1], linestyle='dotted', color='r', linewidth=3)
                    x_scatter1.append(line[1])
                    y_scatter1.append(y_max)
                    print("System failure = " + str(line[1]) + "seconds" )
                else:
                    if line[0] == "Recovery":
                        x_scatter1.append(line[2])
                        y_scatter1.append(y_max)
                        plt.text(line[2], y_max, str(round(line[2],2)) + 's\n(Recovery Time)', ha='left', va='top')
                        plt.axvline(x=line[2], linestyle='dotted', color=cor)
                        print("Recovery: start" + str(line[1]) + "seconds , finish = " + str(line[2]) + " seconds")
                    else:
                        if line[0] == "Benchmark":
                            print("Benchmark: start = " + str(line[1]) + "seconds , finish = " + str(line[2]) + " seconds")
                        else:
                            if(line[0] == "Checkpoint"):
                                plt.text((line[3]+line[2])/2, y_max/2,'Checkpoint '+str(line[1])+'\n'+str(round(line[3]-line[2],2))+'s', 
                                            ha='center', va='bottom')
                                #plt.hlines(y=y_max/2, xmin=line[2], xmax=line[3], linewidth=2, color=cor)
                                plt.annotate ('', (line[2], y_max/2), (line[3], y_max/2), arrowprops={'arrowstyle':'|-|'}, color=cor)
                                plt.text(line[2],y_max/2, str(round(line[2], 2))+'s', ha='right', va='top')
                                plt.text(line[3],y_max/2, str(round(line[3], 2))+'s', ha='left', va='top')

                                print("Checkpoint ", line[1], ":")
                                print("     start time = ", line[2], "seconds")
                                print("     finish time = ", line[3], "seconds")
                                print("     time interval = ", line[3]- line[2], "seconds")
        plt.scatter(x_scatter1, y_scatter1, color = 'black')

    print("Graphic ploted in another window!")
    plt.show()


def ChooseFile():
    from tkinter.filedialog import askopenfilename
    return askopenfilename(initialdir = "../system_monitoring",title = "Select file",filetypes = (("text file","*.csv"),("all files","*.*")))


'''
import sys

print('Number of arguments:', len(sys.argv), 'arguments.')
print('Argument List:', str(sys.argv))
'''

print("Choose the dataset file!")
filename = ChooseFile()
print("Chosen file: ", filename)

print("\nReading the dataset ... Wait!\n")
x_data = []
y_data = []
otherElements = []

x_data, y_data, otherElements = processData(filename, 0)

printGraphic(x_data, y_data, otherElements, 'darkcyan', 'Gr√°fico')
