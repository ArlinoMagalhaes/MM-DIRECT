#!/usr/bin/env python

# Generates a graphic from the dataset generated in Redis Instant Recovery (Redis IR).
# The graphic shows the database transaction throughput (number of commands executed) over time (seconds).
# The graphic is generated by a dataset is a CSV file containing the fields key, command, 
# startTime, finishTime and type. 
# Each line of the CSV file represents a command execution on database.

# The three first CSV data lines are not executed commands, they are the time (in seconds) of database startup, recovery, 
# and benchmark execution. When thetime is not obtained, the value is -1.
#    Belows the fields used:
#        key                        commands    startTime           finishTime          type
#        "Database startup"                     <obtained time>                         0
#        "Shutdown"                             <obtained time>                         0
#        "Recovery"                             <obtained time>     <obtained time>     0
#        "Benchmark"                            <obtained time>     <obtained time>     0
    
#    Checkpoint process information is stored before the commands executed as bellows:
#        key               command           startTime           finishTime         type
#       "Checkpoint"       <idCheckpoint>    <obtained time>     <obtained time>     0
#       "Checkpoint End"   <idCheckpoint>                        <obtained time>     0

#    The remaind CSV data lines are really executed commands.
#        key               command               startTime           finishTime          type
#        <command key>     <command performed>   <obtained time>     <obtained time>     <command type>


#path = path to dataset
def processData(path, start_time):
    data = open(path).readlines()

    #Counts the lines of the dataset
    total = len(data)
    
    #Gets the database start up time
    ln = data[1].split(",")
    database_startup_time = int(ln[2])
    
    
    #Removes header and database Recoverystart up information
    data.pop(0)
    data.pop(0)

    '''
        Creates a list of items from column 'endTime' (in microseconds) of the dataset 
        and converts all items to seconds. Additionally, these items are converted to 
        relative time to the  database start up time, i.e, the  database start up time 
        will be the zero time. 
    '''
    database_startup = 0
    database_recovery = 0
    endTimeList = []    #   Stores the endTime of a performed command.
    otherElements = []  
    for i in range(len(data)):
        linha = data[i].split(",")
        if linha[5] != "0\n":   #   Stores the endTime of a performed command.
            if linha[3].isnumeric():#   prevents to a possible corrupted data
                num =  int((int(linha[3]) - database_startup_time)/1000000)
               # if num >= start_time:
                endTimeList.append(num) #finishTime
                #endTimeList.append(int(linha[4]))  #latency
        else:   #   Stores the database startup time, system restart time, recovery time, or bechmark finish time.
            element = []
            if linha[0] == "Database startup":
                element.append("System restart")
                num = float((int(linha[2]) - database_startup_time)/1000000)
                element.append(num)
                database_startup = num
            else:
                if linha[0] == "Shutdown":
                    element.append("System failure")
                    num = float((int(linha[2]) - database_startup_time)/1000000)
                    element.append(num)
                else:
                    if linha[0] == "Recovery":
                        num = float((int(linha[2]) - database_startup_time)/1000000)
                        if num > 0:
                            element.append("Recovery")
                            element.append(num)
                            num = float((int(linha[3]) - database_startup_time)/1000000)
                            element.append(num)
                            database_recovery = num
                    else:
                        if linha[0] == "Benchmark":
                            element.append("Benchmark")
                            num = float((int(linha[2]) - database_startup_time)/1000000)
                            element.append(num)
                            num = float((int(linha[3]) - database_startup_time)/1000000)
                            element.append(num)
                        else:
                            if linha[0] == "Checkpoint":
                                element.append("Checkpoint")  # Checkpoint
                                element.append(linha[1])  # checkpoint ID
                                element.append((int(linha[2])-database_startup_time)/1000000) #   start time
                                element.append((int(linha[3])-database_startup_time)/1000000) #   end time
                            else:
                                if linha[0] == "Checkpoint End":
                                    element.append("Checkpoint End")  #  End of the checkpoint
                                    element.append(linha[1])  #   checkpoint ID
                                    element.append((int(linha[3])-database_startup_time)/1000000) #   end time
            if element:
                otherElements.append(element)

    endTimeList.sort();


    x = list(range(0, max(endTimeList))) # List from zero to maximum end of time 
    y = [0] * max(endTimeList) # List o zeros

    # Stores in y the number items in x that are in endTimeList
    j = 0
    i = 0
    maxList = len(x)
    while i < maxList:
        if x[i] == endTimeList[j]:
            y[i] += 1
            j += 1
        else:
            i += 1
    
    #   Shifts the begining of the graphic to start_time
    if start_time > 0:
        del x[:start_time]
        del y[:start_time]
        for i in range(len(x)):
            x[i] = i
        for i in range(len(otherElements)-1):
            line = otherElements[i]
            if line[0] == "System restart" or line[0] == "System failure":
                line[1] = line[1] - start_time
            if line[0] == "Recovery" or line[0] == "Benchmark":
                line[1] = line[1] - start_time
                line[2] = line[2] - start_time
            if line[0] == "Checkpoint":
                line[2] = line[2] - start_time
                line[3] = line[3] - start_time
            if line[0] == "Checkpoint End":
                line[2] = line[2] - start_time

    print("Total of lines from dataset:", total)
    print("Graphic: X lines = ", len(x), ", Y lines = ", len(y))

    sum_throughput_before_database_startup = 0
    sum_throughput_after_database_recovery = 0
    sum_throughput_during_database_recovery = 0
    total1 = 0
    total2 = 0
    total3 = 0
    for i in range(len(y)):
        if x[i] < database_startup:
            sum_throughput_before_database_startup = sum_throughput_before_database_startup + y[i]
            total1 = total1 + 1
        else:
            if x[i] > database_recovery:
                sum_throughput_after_database_recovery = sum_throughput_after_database_recovery + y[i]
                total2 = total2 + 1
            else:
                if x[i] > database_startup:
                    sum_throughput_during_database_recovery = sum_throughput_during_database_recovery + y[i]
                    total3 = total3 + 1
    if total1 != 0:
        print("avarage Throughput before database startup = ", sum_throughput_before_database_startup/total1)
    if total2 != 0:
        print("avarage Throughput after database recovery = ", sum_throughput_after_database_recovery/total2)
    if total3 != 0:
        print("avarage Throughput during database recovery = ", sum_throughput_during_database_recovery/total3)
    print("avarage Throughput = ", (sum_throughput_before_database_startup + sum_throughput_after_database_recovery + sum_throughput_during_database_recovery)/(total1 + total2 + total3))

    return x, y, otherElements



def printGraphic(x_data, y_data, otherElements, cor, legend):
    import matplotlib.pyplot as plt
    plt.figure(figsize=(16,8))

    #plt.rc('font', size=20) 
    #plt.rc('axes', titlesize=20)     # fontsize of the axes title
    #plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
    #plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
    #plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
    #plt.rc('legend', fontsize=20)    # legend fontsize
    #plt.rc('figure', titlesize=20)  # fontsize of the figure title

    plt.plot(x_data, y_data, color = cor, label = legend)
    plt.grid(True)
    plt.xlabel("Time")
    plt.ylabel("Transaction Throughput")
    leg = plt.legend()
    leg.get_frame().set_edgecolor('black')
    
    y_max = max(y_data)

    if otherElements:
        x_scatter1 = []
        y_scatter1 = []
        for i in range(len(otherElements)):
            line = otherElements[i]
            if line[0] == "System restart":
                x_scatter1.append(line[1])
                y_scatter1.append(y_max/10)
                plt.text(line[1], y_max/10, str(round(line[1], 2)) + 's \n(System Restart)', ha='left', va='center')
                print("System restart = " + str(line[1]) + " seconds")
            else:
                if line[0] == "System failure":
                    plt.text(line[1], y_max, 'System failure', ha='center', va='baseline', weight="bold")
                    plt.text(line[1], y_max, str(round(line[1], 2)) + 's', ha='left', va='top')
                    plt.axvline(x=line[1], linestyle='dotted', color='r', linewidth=3)
                    x_scatter1.append(line[1])
                    y_scatter1.append(y_max)
                    print("System failure = " + str(line[1]) + "seconds" )
                else:
                    if line[0] == "Recovery":
                        x_scatter1.append(line[2])
                        y_scatter1.append(y_max)
                        plt.text(line[2], y_max, str(round(line[2],2)) + 's\n(Recovery Time)', ha='left', va='top')
                        plt.axvline(x=line[2], linestyle='dotted', color=cor)
                        print("Recovery: start" + str(line[1]) + "seconds , finish = " + str(line[2]) + " seconds")
                    else:
                        if line[0] == "Benchmark":
                            print("Benchmark: start = " + str(line[1]) + "seconds , finish = " + str(line[2]) + " seconds")
                        else:
                            if(line[0] == "Checkpoint"):
                                plt.text((line[3]+line[2])/2, y_max/2,'Checkpoint '+str(line[1])+'\n'+str(round(line[3]-line[2],2))+'s', 
                                            ha='center', va='bottom')
                                #plt.hlines(y=y_max/2, xmin=line[2], xmax=line[3], linewidth=2, color=cor)
                                plt.annotate ('', (line[2], y_max/2), (line[3], y_max/2), arrowprops={'arrowstyle':'|-|'}, color=cor)
                                plt.text(line[2],y_max/2, str(round(line[2], 2))+'s', ha='right', va='top')
                                plt.text(line[3],y_max/2, str(round(line[3], 2))+'s', ha='left', va='top')

                                print("Checkpoint ", line[1], ":")
                                print("     start time = ", line[2], "seconds")
                                print("     finish time = ", line[3], "seconds")
                                print("     time interval = ", line[3]- line[2], "seconds")
        plt.scatter(x_scatter1, y_scatter1, color = 'black')

    print("Graphic ploted in another window!")
    plt.show()


def ChooseFile():
    from tkinter.filedialog import askopenfilename
    return askopenfilename(initialdir = "../datasets",title = "Select file",filetypes = (("text file","*.csv"),("all files","*.*")))


'''
import sys

print('Number of arguments:', len(sys.argv), 'arguments.')
print('Argument List:', str(sys.argv))
'''

print("Choose the dataset file!")
filename = ChooseFile()
print("Chosen file: ", filename)

print("\nReading the dataset ... Wait!\n")
x_data = []
y_data = []
otherElements = []

x_data, y_data, otherElements = processData(filename, 0)

printGraphic(x_data, y_data, otherElements, 'darkcyan', 'Graph')
