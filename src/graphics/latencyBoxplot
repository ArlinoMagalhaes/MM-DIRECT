#!/usr/bin/env python

# Generates a graphic from the dataset generated in Redis Instant Recovery (Redis IR).
# The graphic shows the database latency over time (seconds).
# The graphic is generated by a dataset is a CSV file containing the fields key,command,startTime,finishTime and type. 
# Each line of the CSV file represents a command execution on database.

# The three first CSV data lines are not executed commands, they are the time (in seconds) of database startup, recovery, 
# and benchmark execution. When thetime is not obtained, the value is -1.
#    Belows the fields used:
#        key                        commands    startTime           finishTime          type
#        "Database startup"                     <obtained time>                         0
#        "Shutdown"                             <obtained time>                         0
#        "Recovery"                             <obtained time>     <obtained time>     0
#        "Benchmark"                            <obtained time>     <obtained time>     0
    
#    Checkpoint process information is stored before the commands executed as bellows:
#        key               command           startTime           finishTime         type
#       "Checkpoint"       <idCheckpoint>    <obtained time>     <obtained time>     0
#       "Checkpoint End"   <idCheckpoint>                        <obtained time>     0

#    The remaind CSV data lines are really executed commands.
#        key               command               startTime           finishTime          type
#        <command key>     <command performed>   <obtained time>     <obtained time>     <command type>


#path = path to dataset
def processData(path):
    data = open(path).readlines()

    #Counts the lines of the dataset
    total = len(data)
    
    #Gets the database start up time
    ln = data[1].split(",")
    database_startup_time = int(ln[2])
    
    
    #Removes header and database Recoverystart up information
    data.pop(0)
    data.pop(0)

    '''
        Creates a list of items from column 'endTime' (in microseconds) of the dataset 
        and converts all items to seconds. Additionally, these items are converted to 
        relative time to the  database start up time, i.e, the  database start up time 
        will be the zero time. 
    '''
    database_startup = 0
    database_recovery = 0
    y = []
    for i in range(len(data)):
        linha = data[i].split(",")
        if linha[5] == "0\n":   #   Stores the endTime of a performed command.
            if linha[0] == "Database startup":
                num = float((int(linha[2]) - database_startup_time)/1000000)
                database_startup = num
            else:
                if linha[0] == "Recovery":
                    num = float((int(linha[3]) - database_startup_time)/1000000)
                    database_recovery = num

    for i in range(len(data)):
        linha = data[i].split(",")
        if linha[5] != "0\n":   #   Stores the endTime of a performed command.
            if linha[3].isnumeric():#   prevents to a possible corrupted data
                num =  int((int(linha[3]) - database_startup_time)/1000000)
                if num >= database_startup and num<=database_recovery:
                    y.append(int(linha[4])) #finishTime

    print("Total of lines from dataset:", total)
    print("Graphic: Y lines = ", len(y))

    return y

def printGraphic(y):
    import matplotlib.pyplot as plt
    #plt.figure(figsize=(16,8))

    #plt.rc('font', size=20) 
    #plt.rc('axes', titlesize=20)     # fontsize of the axes title
    #plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
    #plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
    #plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
    #plt.rc('legend', fontsize=20)    # legend fontsize
    #plt.rc('figure', titlesize=20)  # fontsize of the figure title
    
    plt.boxplot(y)
    
    plt.grid(True)
    plt.ylabel("Transaction latency (microseconds)")
    plt.xticks([])

    print("Graphic ploted in another window!")
    plt.show()


def ChooseFile():
    from tkinter.filedialog import askopenfilename
    return askopenfilename(initialdir = "../datasets",title = "Select file",filetypes = (("text file","*.csv"),("all files","*.*")))


'''
import sys

print('Number of arguments:', len(sys.argv), 'arguments.')
print('Argument List:', str(sys.argv))
'''

print("Choose the dataset file!")
filename = ChooseFile()
print("Chosen file: ", filename)

print("\nReading the dataset ... Wait!\n")
y = []

y = processData(filename)

printGraphic(y)

