/////////////////////////////////////////////////////////////////////////////////////////
//		Redis Instant Recovery (RedisIR) configurations file
//	Below are the parameters for executing RedisIR and a brief explanation of its functions. 
//
//	IR_ON == on | true		IR_OFF == off | false


/////////////////////////////////////////////////////////////////////////////////////////
// 				Indexer component options

//	Sequential log filename
//
aof_filename = "logs/sequentialLog.aof";
//
//	Enables Instant Recovery Shema. Otherwise, sequential log recovery is enabled.
//
instant_recovery_state = "ON";  //ON | OFF
//
//	Data structuter of the indexed log. 
//
indexedlog_structure = "BTREE";  //BTREE | HASH.
//
//	Enables sychronous logging indexing, i.e., a transaction must wait the log indexing. 
//	If OFF is setted, the log indexing is asychronous, i.e., a transaction must not wait 
//	for the log indexing. OFF is the default value.
//
//instant_recovery_synchronous = "ON";  //ON | OFF
//
//	Indexed log filename
//
indexedlog_filename = "logs/indexedLog.db";
//
//	Starts the asynchronous indexing of log records before (B) or after (A) the database 
//	recovery. The value B means that the Indexer toThe default value is "A". If the 
//	checkpoint is ON, it will start right after the indexer.
//
//starts_log_indexing = "B";
//
//	Tunes the time interval to index log records. The default value is 500,000 microseconds.
//
//indexer_time_interval = 100000;
//
//	Displays some information about log indexing process. The default value is OFF.
//
//display_indexer_information = "ON";  //ON | OFF
//
//	Time interval (in seconds) to display information about the log indexing when the field
// display_indexer_information is ON. The default value is 60.
//
//indexer_information_time_interaval = 10;
//
//	Redis host name used by the Restorer component. A client application is used to 
//	load tuples into memory using the indexed log during database recovery.  
//	The default host is 127.0.0.1.
//
//redisHostname = "127.0.0.1";
//
//	Redis host port. The default port is 6379.
//
//redisPort = 6379;
//
//	Displays some information about log restorer during database recovery process. 
//	The default value is OFF.
//
//display_restorer_information = "ON";  //ON | OFF
//
//	Time interval (in seconds) to display information about the log indexing when the field
// display_indexer_information is ON. The default value is 60.
//
//restorer_information_time_interaval = 5;
//
//	Replicates indexed log file. When a replica is used, the replication is disabled.
//	The default value is OFF.
//
//indexedlog_replicated = "ON";  //ON | OFF
//
//	Indexed log replicated filename.
//
//indexedlog_replicated_filename = "logs/indexedLog_rep.db";
//
//	Simulate a log corruption by deleting the indexed log and shuting down the system
//	after a given time. If the value is 0 (zero), the log corruption is disabled. The 
//	default value is 0. In a log corruption, first, the system tries to use the log
//	replica. Next, it tries to rebuild the indexed log or porform the default recovery.
//	
//log_corruption = 600
//
//	Rebuilds the indexed log from the last checkpoint record in case of log curruption.
//	The rebulding is performed only if there is not a replica. If is OFF and there is
//	not a replica, the default recovery is performed. The default value is ON.
//	
//rebuild_indexedlog = "OFF"



/////////////////////////////////////////////////////////////////////////////////////////
// 				Checkpointer component options

//	Enables the checkpoint of the indexed log during normal database processing.
//
checkpoint_state = "OFF";  //ON | OFF
//
//	Checkpoints only the most frequently used tuples. The defaul value is OFF.
//
//checkpoints_only_mfu = "ON";  //ON | OFF
//
//	Maximum number of tuples most frequently used to be checkpointed. The defaul value is 0
//	(zero). If the value is 0, then all tuples used by the system will considered mfu.
//
//num_mfu_tuples = 1000
//
//	Number of checkpoint processes to be performed. If the value is 0 (zero), the checkpoint
//	will be perfomed continuously in time invervals. The defaul value is 0.
//
//number_checkpoints = 0
//
//	Enables the self tune of time interval between checkpoint executions. The value of the
//	time interval between checkpoints is self tuned after each checkpoint process. The defaul 
//	value is OFF.
//
//selftune_checkpoint_time_interval = "ON";  //ON | OFF
//
//	A fixed time interval (in seconds) to perform checkpoints. This parameter works only if the 
//	parameter 'selftune_checkpoint_time_interval' is OFF. The default value is 60 seconds.
//
//checkpoint_time_interval = 10;
//
//	Time (in seconds) to start the first checkpoint process after the checkpoint thread is 
//	started. The defaul value is 0.
//
//first_checkpoint_start_time = 10;
//
//	Stops the checkpoint thread after the Memtier benchmark execution.
//	The defaul value is ON.
//
//stop_checkpoint_after_benchmark = "OFF";  //ON | OFF
//
//	Displays some information about checkpoint execution at the end of each checkpoint process. 
//	The default value is OFF.
//
//display_checkpoint_information = "ON";  //ON | OFF


/////////////////////////////////////////////////////////////////////////////////////////
// 				Failure simulation options
//	Options to simulate system failures by system restart. The options bellow must not be
//	used together the beckmark restart options.

//	Restart daley (in seconds) before the system restart. The default value is 1.
//
//restart_daley_time = 5
//
//	Shots down the system after a given time (in seconds) and then restarts the system. The 
//	default value is 200 seconds.
//
//restart_after_time = 10
//
//	Number of times to restart the system after the given time (restart_after_time). If the
//	value is 0 (zero), nothing is done. The default value is 0.
//
//number_restarts_after_time = 4
//
//	Loads the database into memory and then shots down the system after the given time, and 
//  then restars the system. The value given is the time to restart in seconds. 
//	If the value is 0 (zero), nothing is done. The default value is 0.
//
//preload_database_and_restart = 10
//
//	Number of times to restart the system after preloading. If the value is 0 (zero), the
// 	system is preloaded, but it is not restarted. It is important to note that after the
//	failures, the database is not preloaded again. Instead of that, it is performed a
//	database recovery. The default value is 1.
//
//number_restarts_after_preloading = 1
//
//restart_time_after_first_restart


/////////////////////////////////////////////////////////////////////////////////////////
// 				Memtier Bechmark execution options
//	Options to perform Memtier automatically in RedisIR.

//	Enables Memtier automatic execution. The default value is OFF.
//
//memtier_benchmark_state = "ON";  //ON | OFF
//
//	Memtier workload run times. If the value is 0 (zero), the workload will be runned 
//	continuously. The default value is 1.
//
//memtier_benchmark_workload_run_times = 20
//
//	Number of time to restart the database system after the benchmark performing. This
//	useful to simulate successive failures. If the value is 0 (zero) the system will 
//	not be restarted. The default value is 0.
//
//restart_after_bechmarking = 2
//
//	Always stops the benchmark performing after a defined time (in seconds) from the database
//	startup time, even if successive restarts occur, each new workload will be stoped the given
//	time. If the value is 0 (zero) the system will not be stopped. The default value is 0.
//
//time_tostop_benchmarking = 50
//
//	Memtier execution parameters. Run the command line './memtier_benchmark --help' on 
//	Memtier root path to see all parameters.
//	Some default values: 50,000 clients; 4 threads; 10,000 per client; 1:10 Set:Get ratio;
//	uniform random key pattern (R). 
//	Below are some examples of parameters. 
//
//	1 - First example: Performs 200,000,000,000 (100,000x50,000x4) read-only requests. 
//	Sends 100,000 read-only randomized requests per client.
//
//memtier_benchmark_parameters = " --hide-histogram -n 100000 --ratio 0:10  --randomize";
//
//	2 - Second example: Performs 2,000,000,000 (10,000x50,000x4) requests in 1:10 Set:Get ratio
//	acessing keys between 1 and 10000.
//	Changes the prefix of the key name to 'redisIR-'. The key name suffix is on range 1-10000. 
//	Example of key = 'redisIR-1'.
//
//memtier_benchmark_parameters = " --hide-histogram --key-prefix='redisIR-' --key-minimum=1 --key-maximum=10000"
//
//	3 - Third example: Creates 2,000,000,000 set-only request acessing keys between 0 and
//	10000000 in a uniform random pattern.
//	Generates SET commands. "__key__" generates keys by Memtier Key Options. 
//	"__data__" generates values by Memtier Object Options. The key generatioin pattern is 
//	uniform random (R).
//
//memtier_benchmark_parameters = " --hide-histogram --command='set __key__ __data__' --command-key-pattern=R"
//
//	4 - Fourth example: Creates 5,000 keys and 1,000,000 log records.
//	Generates 5,000 commands requests per client. Changes the prefix of the key name to
//	'redisIR-'. The key name suffix is on range 1-10000. The operations are INCR commands. 
//	"__key__" generates keys by Memtier Key Options. "__data__" generates values by Memtier
//	defaul object options. The key generatioin pattern is sequential.
//
//memtier_benchmark_parameters = " --hide-histogram -n 5000 --key-prefix='redisIR-' --key-minimum=1 --key-maximum=5000 --command='set  __key__ __data__' --command-ratio=5000 --command-key-pattern=S"
//
//	5 - Fifth example: Performs 2,000,000,000 (10,000x50,000x4) requests in 5:5 Set:Get ratio
//	acessing keys between 1 and 2000. 
//	Generates 10,000 random commands per client in a ratio 5:5 between SET and GET commands. 
//	Changes the prefix of the key name to 'redisIR-'. The key name suffix is on range 1-2000.
//memtier_benchmark_parameters = " --hide-histogram -n 10000 --ratio 5:5 --randomize --key-prefix='redisIR-' --key-minimum=1 --key-maximum=2000"


/////////////////////////////////////////////////////////////////////////////////////////
// 				Report options
//	This file can be used to generate graphics by the scripts in Redis root path.

//	Generates some reports about recovery, checkpoint and indexer. The default value is "OFF". 
//
//generate_recovery_report = "ON";  //ON | OFF
//
//	Name of the file containig some information about recovery. It is used to save the file 
//	automatically.
//
//recovery_report_filename = "recovery_report/recovery_report.txt";
//
//	Generates the recovery report file automatically after the memtier benckmark have 
//	finished. The default value is ON.
//
//generate_report_file_after_benchmarking = "OFF";  //ON | OFF
//
//	Generates a CSV file containing some information about all database operantins (commands) 
//	executed. The fields: command name, key of the tuple handled, command start time, command 
//	finishTime, and command type. The default value is OFF.	
//
//generate_executed_commands_csv = "ON";  //ON | OFF
//
//	Name of the CSV file containing proprieties about operations executed.
//
//executed_commands_csv_filename = "datasets/datasets.csv";
//
//	Generates a CSV file containing some information about indexing rate. The default 
//	value is OFF.
//
//generate_indexing_report_csv = "ON";  //ON | OFF
//
//	Name of the CSV file containing proprieties about indexing process.
//	It is used to save the file automatically.
//
//indexing_report_csv_filename = "indexing_report/indexing.csv";
//
//	Overwrites the previous recovery report and CSV files after system restart. Otherwise,
//	concatenates the information. If the system is restart in your experiment, you 
//	should use this parameter as OFF to not overwrite the information saved before a restart. 
//	The default value is ON.
//
//overwrite_report_files = "OFF";  //ON | OFF


/////////////////////////////////////////////////////////////////////////////////////////
// 				System monitoring

// Generates the system monitoring about CPU and memory usage. The default value is OFF.
//
//system_monitoring = "ON";  //ON | OFF
//
//	Stops system monitoring generation at benckmark end. The default value is ON.
//
//stop_system_monitoring_end_benckmark = "ON";  //ON | OFF
//
//	CSV file for the system monitoring.
//
//system_monitoring_csv_filename = "system_monitoring/system_monitoring.csv";
//
//	Tunes the time interval to write to the CSV file in seconds. The default value is 
//	10 seconds.
//
//system_monitoring_time_interval = 1;
//
//	Overwrites the previous CSV file. It is usefull in a restart to not overwrite the 
//	previous stored data. The default value is ON.
//
//overwrite_system_monitoring = "OFF";  //ON | OFF
